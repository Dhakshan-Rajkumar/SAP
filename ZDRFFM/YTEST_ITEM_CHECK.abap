FUNCTION YTEST_ITEM_CHECK.
*"----------------------------------------------------------------------
*"*"Local interface:
*"  IMPORTING
*"     VALUE(I_ORDER) TYPE  ZSRF_OD_DISP OPTIONAL
*"  EXPORTING
*"     VALUE(E_MESS) TYPE  BAPI_MSG
*"     VALUE(ZRESULT) TYPE  ZRESULT
*"     VALUE(E_AUFNR) LIKE  ZSPM_BAKO-AUFNR
*"     VALUE(E_MBLNR) LIKE  MSEG-MBLNR
*"     VALUE(E_MBLNR1) LIKE  MSEG-MBLNR
*"  TABLES
*"      T_ORDER STRUCTURE  ZSRF_GI_WITH_ORDER
*"      T_MESSAGE STRUCTURE  ZSRF_MESSAGE
*"----------------------------------------------------------------------
*  DATA: I_CHANGED_LOG(15) VALUE 'NOT-CHANGED'.
  DATA: L_LINES TYPE SY-TABIX,
        L_LINE1 TYPE SY-TABIX,
        L_TABIX TYPE SY-TABIX,
        L_BDMNG(18),
        L_BLDAT(10),
        L_E_MESS  TYPE BAPI_MSG,
        L_ZRESULT TYPE ZRESULT.
  DATA: LA_ORDER LIKE T_ORDER,
        LT_ORDER LIKE T_ORDER OCCURS 0 WITH HEADER LINE,
        LT_ORDER_CHAN LIKE T_ORDER OCCURS 0 WITH HEADER LINE,
        LT_OR_CHECK LIKE ZSRF_GI_WITH_ORDER OCCURS 0 WITH HEADER LINE.
* BDC Messages
  DATA: WA_TEXT(200).
  DATA: WA_MSGNR LIKE SY-MSGNO,
        WA_MSGID LIKE SY-MSGID,
        WA_MSGV1 LIKE SY-MSGV1,
        WA_MSGV2 LIKE SY-MSGV2,
        WA_MSGV3 LIKE SY-MSGV3,
        WA_MSGV4 LIKE SY-MSGV4.
* Refresh T_MESSAGE
  CLEAR: T_MESSAGE[], T_MESSAGE.
  CLEAR: LT_ORDER_CHAN, LT_ORDER.
  REFRESH: LT_ORDER_CHAN, LT_ORDER.
*  PERFORM WA_OPT_OPTION.
* BDC STRUCTURE REFRESH
*  PERFORM REFRESH_BDC_STRUCTURE.

  LOOP AT T_ORDER.
    L_TABIX = SY-TABIX.
    IF T_ORDER-ZCHAN EQ 'S'.                                "TEXT-T03.
      LT_ORDER_CHAN = T_ORDER.
      APPEND LT_ORDER_CHAN.
    ELSEIF T_ORDER-ZCHAN EQ 'O'.                            "TEXT-T02.
      LT_ORDER = T_ORDER.
      APPEND LT_ORDER.
    ENDIF.
    CLEAR: LT_ORDER, LT_ORDER_CHAN, T_ORDER.
  ENDLOOP.

  DATA L_ZDOCNO LIKE YTEST_KBS_TEST-ZDOCNO.
  DATA LT_TEST LIKE YTEST_KBS_TEST OCCURS 0 WITH HEADER LINE.
  SELECT MAX( ZDOCNO )
       FROM YTEST_KBS_TEST
       INTO L_ZDOCNO.
  IF SY-SUBRC EQ 0.

  ELSE.
    L_ZDOCNO = '1'.
  ENDIF.
  LOOP AT LT_ORDER.
*    LT_TEST = LT_ORDER.
    MOVE-CORRESPONDING LT_ORDER TO LT_TEST.
    L_ZDOCNO = L_ZDOCNO + 1.
    LT_TEST-ZDOCNO = L_ZDOCNO.
    APPEND LT_TEST. CLEAR LT_TEST.
  ENDLOOP.

  INSERT YTEST_KBS_TEST FROM TABLE LT_TEST.
  IF SY-SUBRC EQ 0.
    COMMIT WORK.
    E_MESS = 'SUCCESS'.
    ZRESULT = '0'.
  ELSE.
    ROLLBACK WORK.
    E_MESS = 'ERROR'.
    ZRESULT = '1'.

  ENDIF.
ENDFUNCTION.
