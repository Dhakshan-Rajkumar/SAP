************************************************************************
* Program Name      : ZACOU132
* Author            : IG.Moon
* Creation Date     : 10/29/2007
* Specifications By : Andy Choi
* Pattern           : Report 1-1
* Add documentation :
* Description       : Copied from ZACOPOSTACTOUTPUT
*                     and regenerated by Moon
*                   - Upload Post Activity Planning
*
* Modifications Log
* Date   Developer   Request ID    Description
*
* problem: overwrite each value (capacity <-> plan)
************************************************************************
REPORT ZACOU132 MESSAGE-ID ZMCO.
INCLUDE ZACOUI00.

TABLES : ZTCOU132,*ZTCOU132.
*----------------------------------------------------------------------*
*   Data Definition
*----------------------------------------------------------------------*
*Type-Pools
TYPE-POOLS: KCDE.

* Tables
TABLES : CSKS.

DATA : BEGIN OF IT_FILE OCCURS 0,
        KOSTL(10),
        ACT_TYPE(10),
        MEG001(15),
        MEG002(15),
        MEG003(15),
        MEG004(15),
        MEG005(15),
        MEG006(15),
        MEG007(15),
        MEG008(15),
        MEG009(15),
        MEG010(15),
        MEG011(15),
        MEG012(15),
        MEG013(15),
        MEG014(15),
        MEG015(15),
        MEG016(15),
      END OF  IT_FILE.

TYPES: BEGIN OF TY_ROW_TAB.
        INCLUDE STRUCTURE ZTCOU132.                         "1~12 QTY
TYPES:
       ICON TYPE ICON-ID,
       MSG(30),
       CHK(1).
TYPES: END OF TY_ROW_TAB.

TYPES: BEGIN OF TY_OUT.
INCLUDE  TYPE TY_ROW_TAB.
TYPES   CELLTAB  TYPE LVC_T_STYL.
TYPES   TABCOLOR TYPE SLIS_T_SPECIALCOL_ALV.
TYPES: END OF TY_OUT.

* For BAPI
DATA: WA_HEADERINFO     LIKE BAPIPLNHDR,
      IT_INDEXSTRUCTURE TYPE TABLE OF BAPIACPSTRU WITH HEADER LINE,
      IT_COOBJECT       TYPE TABLE OF BAPIACPOBJ WITH HEADER LINE,
      IT_PERVALUE       TYPE TABLE OF BAPIACPVAL WITH HEADER LINE,
      IT_RETURN         TYPE TABLE OF BAPIRET2   WITH HEADER LINE,
      GT_RETURN         TYPE TABLE OF BAPIRET2   WITH HEADER LINE.

DATA : GV_DELTA, G_CURK TYPE WAERS.

DATA: G_ERROR(1),
      G_REPID  LIKE SY-REPID,
      G_IX     LIKE SY-TABIX.

DATA  : IT_ROW_TAB TYPE TABLE OF TY_ROW_TAB WITH HEADER LINE,
        GT_OUT     TYPE TABLE OF TY_OUT     WITH HEADER LINE.

DATA : IT_POST TYPE TABLE OF TY_ROW_TAB WITH HEADER LINE.

DATA  $GT_OUT LIKE GT_OUT OCCURS 0 WITH HEADER LINE.

DEFINE __PROCESS.
  PERFORM SHOW_PROGRESS USING &1 &2.
END-OF-DEFINITION.
DEFINE __CLS.                          " clear & refresh
  CLEAR &1.REFRESH &1.
END-OF-DEFINITION.
DEFINE __FOCUS.
  CALL METHOD CL_GUI_CONTROL=>SET_FOCUS
      EXPORTING
        CONTROL = &1 .
END-OF-DEFINITION.

DEFINE TRANS_VALUE.
  IT_PERVALUE-ACTVTY_QTY_PER&1  =  IT_POST-MEG0&1.
END-OF-DEFINITION.

DEFINE TRANS_VALUE_CAP.
  IT_PERVALUE-ACTVTY_CAP_PER&1  =  IT_POST-MEG0&1.
END-OF-DEFINITION.

*----------------------------------------------------------------------*
* Define local class
*----------------------------------------------------------------------*
CLASS LCL_EVENT_RECEIVER DEFINITION.
  PUBLIC SECTION.

    TYPES: BEGIN OF ZTCOU132_K,
              CO_AREA TYPE KOKRS,
              FISC_YEAR TYPE GJAHR,
              KOSTL TYPE KOSTL,
              ACT_TYPE TYPE LSTAR,
              VERSION TYPE VERSN,
           END OF ZTCOU132_K.

    TYPES: ZTCOU132_KEY   TYPE STANDARD TABLE OF ZTCOU132_K,
           ZTCOU132_TABLE TYPE STANDARD TABLE OF ZTCOU132.

    METHODS:
      HANDLE_DATA_CHANGED
         FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
             IMPORTING ER_DATA_CHANGED,
                       GET_DELETED_ROWS
             EXPORTING
                       DELETED_ROWS TYPE ZTCOU132_TABLE,

      REFRESH_DELTA_TABLES.

  PRIVATE SECTION.
    DATA DELETED_ROWS TYPE STANDARD TABLE OF ZTCOU132.

* This flag is set if any error occured in one of the
* following methods:
    DATA: ERROR_IN_DATA TYPE C.
    METHODS:
      UPDATE_DELTA_TABLES
         IMPORTING
            PR_DATA_CHANGED TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL.

ENDCLASS.                   " LCL_EVENT_RECEIVER Definition

*----------------------------------------------------------------------*
* Implementation local class
*----------------------------------------------------------------------*
CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.

* Setting for Change data
  METHOD HANDLE_DATA_CHANGED.

* remember deleted lines for saving
    CALL METHOD UPDATE_DELTA_TABLES( ER_DATA_CHANGED ).

    PERFORM DATA_CHANGED USING ER_DATA_CHANGED.
  ENDMETHOD.                    " handle_data_changed

  METHOD GET_DELETED_ROWS.
    DELETED_ROWS = ME->DELETED_ROWS.
  ENDMETHOD.

  METHOD REFRESH_DELTA_TABLES.
    CLEAR ME->DELETED_ROWS[].
  ENDMETHOD.

  METHOD UPDATE_DELTA_TABLES.
    DATA: L_DEL_ROW TYPE LVC_S_MOCE,
          LS_ZTCOU132 TYPE ZTCOU132,
          LS_OUTTAB LIKE LINE OF GT_OUT.

    LOOP AT PR_DATA_CHANGED->MT_DELETED_ROWS INTO L_DEL_ROW.
      READ TABLE GT_OUT INTO LS_OUTTAB INDEX L_DEL_ROW-ROW_ID.
      IF SY-SUBRC NE 0.
        MESSAGE I000(0K) WITH TEXT-E01. "Internal error
      ELSE.
        MOVE-CORRESPONDING LS_OUTTAB TO LS_ZTCOU132.
        APPEND LS_ZTCOU132 TO DELETED_ROWS.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

ENDCLASS.                   " LCL_EVENT_RECEIVER Implementation

DATA G_EVENT_RECEIVER  TYPE REF TO LCL_EVENT_RECEIVER.

************************************************************************
DATA  : FLAG_DATA_CHANGED,
        INFO(80).
DATA: BEGIN OF FTAB OCCURS 10,
        FCODE(6),
      END OF FTAB.
****************************** constants *******************************
CONSTANTS:  FALSE VALUE ' ',
            TRUE  VALUE 'X'.

FIELD-SYMBOLS : <MONTH>.

*----------------------------------------------------------------------*
*   Selection Condition                                                *
*----------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK BL1 WITH FRAME TITLE TEXT-001.

PARAMETERS : P_KOKRS LIKE TKA01-KOKRS OBLIGATORY MEMORY ID CAC,
             P_YEAR  TYPE BDATJ OBLIGATORY MEMORY ID BDTJ,
             P_VERSN LIKE COSL-VERSN OBLIGATORY DEFAULT '311'.

SELECT-OPTIONS S_KOSTL FOR CSKS-KOSTL.

SELECTION-SCREEN END OF BLOCK BL1.

SELECTION-SCREEN BEGIN OF BLOCK BL3 WITH FRAME TITLE TEXT-022.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT  1(12)  TEXT-020.
SELECTION-SCREEN POSITION 13.
PARAMETERS: P_CAP RADIOBUTTON GROUP RT01
            USER-COMMAND  CTY.
SELECTION-SCREEN COMMENT  25(10) TEXT-021.
SELECTION-SCREEN POSITION 35.
PARAMETER P_QTY  RADIOBUTTON GROUP RT01.

SELECTION-SCREEN COMMENT  50(5) TEXT-029.
SELECTION-SCREEN POSITION 60.
PARAMETER P_ALL  RADIOBUTTON GROUP RT01.

SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK BL3.

* block 3 {
SELECTION-SCREEN BEGIN OF BLOCK B3 WITH FRAME TITLE TEXT-005.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 35(12)  TEXT-X00 FOR FIELD P_EXL
                                 MODIF ID EXL.
PARAMETERS P_EXL   RADIOBUTTON GROUP RADI DEFAULT 'X'
                                 MODIF ID EXL.
SELECTION-SCREEN COMMENT 55(21) TEXT-X01
                                 MODIF ID EXL.
PARAMETERS P_TXT     RADIOBUTTON GROUP RADI
                                 MODIF ID EXL.
SELECTION-SCREEN END   OF LINE.

PARAMETERS: P_FILE  LIKE RLGRAP-FILENAME OBLIGATORY
                    DEFAULT 'c:\temp\CCA_Activity_Plan.xls'
                    MODIF ID EXL.

SELECTION-SCREEN SKIP 1.
SELECTION-SCREEN BEGIN OF BLOCK BX WITH FRAME TITLE TEXT-00X.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 10(69) TEXT-T04 MODIF ID BRT.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK BX.

PARAMETERS P_HEAD AS CHECKBOX MODIF ID EXL DEFAULT 'X'.
SELECTION-SCREEN END   OF BLOCK B3.
* }

SELECTION-SCREEN BEGIN OF BLOCK BLS WITH FRAME TITLE TEXT-003.
PARAMETERS : "P_NOT   RADIOBUTTON GROUP RA01,
             P_UPD   RADIOBUTTON GROUP RA01,
             P_DLT   RADIOBUTTON GROUP RA01.
PARAMETERS : P_TRUN AS CHECKBOX.
SELECTION-SCREEN END OF BLOCK BLS.

* Layout
SELECTION-SCREEN BEGIN OF BLOCK B4 WITH FRAME TITLE TEXT-01S.
PARAMETER P_VARI TYPE SLIS_VARI.
SELECTION-SCREEN END OF BLOCK B4.


*&----------------------------------------------------------------------
*  Initialization
*&----------------------------------------------------------------------
INITIALIZATION.
*----------------------------------------------------------------------*
* AT SELECTION-SCREEN
*----------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
  PERFORM BROWSER CHANGING P_FILE.

AT SELECTION-SCREEN OUTPUT.
  PERFORM MODIFY_SCREEN.
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_VARI.
  PERFORM ALV_VARIANT_F4 CHANGING P_VARI.

*----------------------------------------------------------------------*
* Start-of-selection
*----------------------------------------------------------------------*
START-OF-SELECTION.
  PERFORM VALIDATE.
* Delta Posting or Update Posting
  PERFORM SET_POSTING_MODE.
* Upload File
  PERFORM UPLOAD_FILE USING P_FILE.

  PERFORM MOVE_OUT.
  PERFORM SET_OUTPUT .

*----------------------------------------------------------------------*
* END-of-selection
*----------------------------------------------------------------------*
END-OF-SELECTION.

*----------------------------------------------------------------------*
* Sub-Rutines
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  BROWSING_FILE_PATH
*&---------------------------------------------------------------------*
*       Browsing File Paths
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM BROWSING_FILE_PATH.
* Browsing
  CALL FUNCTION 'KD_GET_FILENAME_ON_F4'
       EXPORTING
            MASK          = '*.xls'
            STATIC        = 'X'
       CHANGING
            FILE_NAME     = P_FILE
       EXCEPTIONS
            MASK_TOO_LONG = 1
            OTHERS        = 2.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    " BROWSING_FILE_PATH

*&---------------------------------------------------------------------*
*&      Form  CHK_FILE_EXISTENCY
*&---------------------------------------------------------------------*
*       Check File Existency
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CHK_FILE_EXISTENCY.
* Check File Existency
  DATA : LV_EXIST.
  CLEAR  LV_EXIST.
  CALL FUNCTION 'TMP_GUI_GET_FILE_EXIST'
    EXPORTING
      FNAME                = P_FILE
    IMPORTING
      EXIST                = LV_EXIST
*     ISDIR                =
*     FILESIZE             =
    EXCEPTIONS
      FILEINFO_ERROR       = 1
      OTHERS               = 2.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  IF LV_EXIST NE 'X'.
    MESSAGE E075 WITH P_FILE.
  ENDIF.

ENDFORM.                    " CHK_FILE_EXISTENCY

*&---------------------------------------------------------------------*
*&      Form  UPLOAD_FILE
*&---------------------------------------------------------------------*
*       Upload File data
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM UPLOAD_FILE USING FILENAME.

  IF P_FILE EQ SPACE.
    G_ERROR = TRUE.
    EXIT.
  ENDIF.

  IF P_FILE EQ SPACE.
    G_ERROR = TRUE.
    EXIT.
  ENDIF.

  DATA: IT_ITAB LIKE STANDARD TABLE OF ALSMEX_TABLINE WITH HEADER LINE.
  FIELD-SYMBOLS : <FS>.
  DATA : V_INDEX TYPE I.
  DATA : BEGIN_ROW TYPE I VALUE 1.

  __PROCESS 'Upload file...' '10'.
  IF P_HEAD = TRUE.
    ADD 1 TO BEGIN_ROW.
  ENDIF.

  IF P_TXT NE TRUE.
    CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
         EXPORTING
              FILENAME                = FILENAME
              I_BEGIN_COL             = 1
              I_BEGIN_ROW             = BEGIN_ROW
              I_END_COL               = 14
              I_END_ROW               = 65535
         TABLES
              INTERN                  = IT_ITAB
         EXCEPTIONS
              INCONSISTENT_PARAMETERS = 1
              UPLOAD_OLE              = 2
              OTHERS                  = 3.

    IF SY-SUBRC NE 0.
      MESSAGE S000 WITH 'Could not find the file.'.
      STOP.
    ENDIF.

    __PROCESS 'Upload file...' '20'.

    IF IT_ITAB[] IS INITIAL.
      MESSAGE S003(ZZ) WITH 'No Data was uploaded'.
      G_ERROR = TRUE .
      EXIT.
    ELSE.
      SORT IT_ITAB BY ROW COL.
      LOOP AT IT_ITAB.
        MOVE : IT_ITAB-COL TO V_INDEX.
        ASSIGN COMPONENT V_INDEX OF STRUCTURE IT_FILE TO <FS>.
        MOVE : IT_ITAB-VALUE TO <FS>.
        AT END OF ROW.
          APPEND IT_FILE.
        ENDAT.
      ENDLOOP.
    ENDIF.
  ELSE.
    DATA CANCEL.
    CALL FUNCTION 'UPLOAD'
         EXPORTING
              FILENAME            = FILENAME
              FILETYPE            = 'DAT'
         IMPORTING
              CANCEL              = CANCEL
         TABLES
              DATA_TAB            = IT_FILE
         EXCEPTIONS
              CONVERSION_ERRO     = 1
              INVALID_TABLE_WIDTH = 2
              INVALID_TYPE        = 3.

    IF NOT CANCEL IS INITIAL OR SY-SUBRC NE 0.
      MESSAGE S003(ZZ) WITH 'No Data was uploaded'.
      STOP.
    ENDIF.

  ENDIF.

  __PROCESS 'Check data...' '30'.

  DATA : MEGXXX LIKE IT_FILE-MEG001.

  LOOP AT IT_FILE.
    IF NOT IT_FILE-KOSTL IN S_KOSTL.
      DELETE IT_FILE.
      CONTINUE.
    ENDIF.

    DO 12 TIMES VARYING MEGXXX FROM IT_FILE-MEG001 NEXT
                                    IT_FILE-MEG002.
      PERFORM CHECK_NUM CHANGING MEGXXX.
    ENDDO.

    MODIFY IT_FILE.
  ENDLOOP.

  __CLS IT_ROW_TAB.
  LOOP AT IT_FILE.
    MOVE-CORRESPONDING IT_FILE TO IT_ROW_TAB.
    IT_ROW_TAB-CO_AREA   = P_KOKRS.
    IT_ROW_TAB-VERSION   = P_VERSN.
    IT_ROW_TAB-FISC_YEAR = P_YEAR.
    APPEND IT_ROW_TAB.
  ENDLOOP.
ENDFORM.                    " UPLOAD_FILE

*&---------------------------------------------------------------------*
*&      Form  CLEAR_BAPI_STR
*&---------------------------------------------------------------------*
*       Clear Str. (For BAPI)
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CLEAR_BAPI_STR.

  __CLS :  IT_INDEXSTRUCTURE,IT_COOBJECT,IT_PERVALUE.

  CLEAR WA_HEADERINFO.

ENDFORM.                    " CLEAR_BAPI_STR
*&---------------------------------------------------------------------*
*&      Form  SET_POSTING_MODE
*&---------------------------------------------------------------------*
*       Delta Posting or Update Posting
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SET_POSTING_MODE.

  CASE 'X'.
    WHEN P_UPD. CLEAR GV_DELTA.
    WHEN P_DLT. GV_DELTA = 'X'.
  ENDCASE.

ENDFORM.                    " SET_POSTING_MODE

*&---------------------------------------------------------------------*
*&      Form  MODIFY_SCREEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM MODIFY_SCREEN.

  LOOP AT SCREEN.
    IF SCREEN-GROUP1 = 'BRT'.
      SCREEN-INTENSIFIED = 1.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " MODIFY_SCREEN
*&---------------------------------------------------------------------*
*&      Form  BROWSER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_P_FILE  text
*----------------------------------------------------------------------*
FORM BROWSER CHANGING FILENAME.
  DATA: IT_TFILE TYPE FILETABLE ,
        GD_SUBRC TYPE I.

  CALL  METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
        EXPORTING
          WINDOW_TITLE = 'Select File Name'
          DEFAULT_EXTENSION = '*.*'
          DEFAULT_FILENAME = '*.*'
          FILE_FILTER = '*.*'
          INITIAL_DIRECTORY = 'c:\temp\'
*         MULTISELECTION =
*         WITH_ENCODING =
        CHANGING
          FILE_TABLE = IT_TFILE
          RC = GD_SUBRC.
*         USER_ACTION =
*         FILE_ENCODING =
*         EXCEPTIONS
*         FILE_OPEN_DIALOG_FAILED = 1
*         CNTL_ERROR = 2
*         ERROR_NO_GUI = 3
*         NOT_SUPPORTED_BY_GUI = 4
*         others = 5
  .
  IF SY-SUBRC <> 0.
*         MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.
    READ TABLE IT_TFILE INTO FILENAME INDEX 1.
  ENDIF.

ENDFORM.                    " BROWSER
*&---------------------------------------------------------------------*
*&      Form  SHOW_PROGRESS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_TEXT_S01  text
*      -->P_&1  text
*----------------------------------------------------------------------*
FORM SHOW_PROGRESS USING    PF_TEXT
                            VALUE(PF_VAL).
  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
       EXPORTING
            PERCENTAGE = PF_VAL
            TEXT       = PF_TEXT.

ENDFORM.                    " SHOW_PROGRESS
*&---------------------------------------------------------------------*
*&      Form  CHECK_NUM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_<MONTH>  text
*----------------------------------------------------------------------*
FORM CHECK_NUM CHANGING N_VALUE.
  DATA NUM(12) VALUE ' 0123456789.'.

  REPLACE : '"' WITH '' INTO N_VALUE,
            '"' WITH '' INTO N_VALUE,
            ',' WITH '' INTO N_VALUE,
            ',' WITH '' INTO N_VALUE,
            ',' WITH '' INTO N_VALUE,
            ',' WITH '' INTO N_VALUE,
            ',' WITH '' INTO N_VALUE,
            ',' WITH '' INTO N_VALUE,
            ',' WITH '' INTO N_VALUE.
  CONDENSE N_VALUE NO-GAPS.
  IF N_VALUE CN NUM. N_VALUE = 0. ENDIF.
ENDFORM.                    " CHECK_NUM
*&---------------------------------------------------------------------*
*&      Form  DATA_CHANGED
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ER_DATA_CHANGED  text
*----------------------------------------------------------------------*
FORM DATA_CHANGED USING RR_DATA_CHANGED
                        TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL.

  FLAG_DATA_CHANGED = TRUE.

  DATA: LS_MOD_CELLS TYPE LVC_S_MODI,
        LS_CELLS     TYPE LVC_S_MODI,
        LT_VALUES TYPE TABLE OF BAPI_CHAR_VALUES WITH HEADER LINE.

  LOOP AT RR_DATA_CHANGED->MT_GOOD_CELLS INTO LS_MOD_CELLS.
    READ TABLE GT_OUT INDEX LS_MOD_CELLS-ROW_ID.
    IF SY-SUBRC = 0.
      CALL METHOD RR_DATA_CHANGED->MODIFY_CELL
                EXPORTING I_ROW_ID    = LS_MOD_CELLS-ROW_ID
                          I_FIELDNAME = LS_MOD_CELLS-FIELDNAME
                          I_VALUE     = LS_MOD_CELLS-VALUE.
    ENDIF.
  ENDLOOP.

  __SET_REFRESH_MODE TRUE.
  CALL METHOD G_GRID->REFRESH_TABLE_DISPLAY
       EXPORTING IS_STABLE = STABLE.

ENDFORM.                    " DATA_CHANGED
*&---------------------------------------------------------------------*
*&      Form  MOVE_OUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM MOVE_OUT.
  __PROCESS 'Preparing output...' '95'.

  __CLS GT_OUT.

  LOOP AT IT_ROW_TAB.
    CLEAR GT_OUT.
    MOVE-CORRESPONDING IT_ROW_TAB TO GT_OUT.
    APPEND GT_OUT.
  ENDLOOP.


ENDFORM.                    " MOVE_OUT
*&---------------------------------------------------------------------*
*&      Form  SET_OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SET_OUTPUT.
  CHECK : G_ERROR IS INITIAL.
  CLEAR FLAG_DATA_CHANGED.
  CALL SCREEN 100.

ENDFORM.                    " SET_OUTPUT
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.
  SET TITLEBAR '100'.
*   Exclude toolbar
  PERFORM EXCLUDE_FUNCTIONS.

ENDMODULE.                 " STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*&      Form  EXCLUDE_FUNCTIONS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM EXCLUDE_FUNCTIONS.
  PERFORM APPEND_EXCLUDE_FUNCTIONS
           TABLES GT_EXCLUDE[]
           USING: CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO,
                  CL_GUI_ALV_GRID=>MC_FC_AVERAGE,
                  CL_GUI_ALV_GRID=>MC_FC_GRAPH,
                  CL_GUI_ALV_GRID=>MC_FC_INFO,
                  CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW,
                  CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW,
                  CL_GUI_ALV_GRID=>MC_FC_LOC_CUT,
                  CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW,
                  CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW,
                  CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.

ENDFORM.                    " EXCLUDE_FUNCTIONS
*&---------------------------------------------------------------------*
*&      Module  DISPLAY_ALV_100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE DISPLAY_ALV_100 OUTPUT.
  IF G_CUSTOM_CONTAINER IS INITIAL.
    PERFORM CREATE_AND_INIT_ALV.
*   Display alv grid
    CALL METHOD G_GRID->SET_TABLE_FOR_FIRST_DISPLAY
         EXPORTING IS_LAYOUT            = GS_LAYO
                   IT_TOOLBAR_EXCLUDING = GT_EXCLUDE
                   I_SAVE               = GC_VAR_SAVE
                   IS_VARIANT           = GS_VARIANT
         CHANGING  IT_OUTTAB            = GT_OUT[]
                   IT_FIELDCATALOG      = GT_FCAT[]
                   IT_SORT              = GT_SORT[].
  ELSE.
    CALL METHOD G_GRID->REFRESH_TABLE_DISPLAY.
  ENDIF.
  __FOCUS G_GRID.
  PERFORM USER_STATUS.

ENDMODULE.                 " DISPLAY_ALV_100  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.
  CLEAR : G_ERROR.

  OK_CODE = SY-UCOMM.
  CLEAR SY-UCOMM.
  CASE OK_CODE.

    WHEN 'BACK' OR 'CANC'.
      PERFORM FREE_CONTAINER.
      LEAVE TO SCREEN 0.
    WHEN 'EXIT'.
      LEAVE PROGRAM.

    WHEN 'SAVE'.
      CHECK SY-DYNNR EQ '0100'.
      PERFORM REALLY?.
      CHECK G_ERROR NE TRUE.

      PERFORM : APPLY_CCA,
                REFRESH_ALV.
      __FOCUS G_GRID.

    WHEN 'SWITCH'.
      IF SY-DYNNR EQ '0100'.
        PERFORM SWITCH_EDIT_MODE.
      ENDIF.
      __FOCUS G_GRID.

    WHEN 'LOGV'.
      CALL SCREEN '300'.
  ENDCASE.


ENDMODULE.                 " USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*&      Form  FREE_CONTAINER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FREE_CONTAINER.
  IF NOT G_EVENT_RECEIVER IS INITIAL.
    FREE G_EVENT_RECEIVER.
  ENDIF.

  IF NOT G_GRID IS INITIAL.
    CALL METHOD G_GRID->FREE.
  ENDIF.

  IF NOT G_CUSTOM_CONTAINER IS INITIAL.
    CALL METHOD G_CUSTOM_CONTAINER->FREE.
  ENDIF.

  FREE : G_GRID,G_CUSTOM_CONTAINER.

  CLEAR :  GS_LAYO,GT_EXCLUDE,GT_OUT[],GT_FCAT[],GT_SORT[].


ENDFORM.                    " FREE_CONTAINER
*&---------------------------------------------------------------------*
*&      Form  REALLY?
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM REALLY?.
  DATA $EXISTS(1).
  DATA L_ANSWER(1).

  PERFORM POP_UP USING
      'This will change the CCA data!'
      'Do you really want to proceed?' ' '
                 CHANGING L_ANSWER.

  IF L_ANSWER NE 'J'.
    G_ERROR = TRUE.
    MESSAGE S000 WITH 'Processing was canceled by user.'.
  ENDIF.
ENDFORM.                    " REALLY?
*&---------------------------------------------------------------------*
*&      Form  POP_UP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1886   text
*      -->P_1887   text
*      -->P_1888   text
*      <--P_L_ANSWER  text
*----------------------------------------------------------------------*
FORM POP_UP USING    P_TEXT P_TEXT2 P_CANC
            CHANGING P_ANSWER.

  CALL FUNCTION 'POPUP_TO_CONFIRM_STEP'
       EXPORTING
            TEXTLINE1      = P_TEXT
            TEXTLINE2      = P_TEXT2
            TITEL          = 'Check!'
            CANCEL_DISPLAY = P_CANC
       IMPORTING
            ANSWER         = P_ANSWER.


ENDFORM.                    " POP_UP
*&---------------------------------------------------------------------*
*&      Form  REFRESH_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM REFRESH_ALV.
  __SET_REFRESH_MODE TRUE.
  CALL METHOD G_GRID->REFRESH_TABLE_DISPLAY
       EXPORTING IS_STABLE = STABLE.

ENDFORM.                    " REFRESH_ALV
*&---------------------------------------------------------------------*
*&      Form  CREATE_AND_INIT_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CREATE_AND_INIT_ALV.
*   Create object
  PERFORM CREATE_OBJECT.

*  Create Object to verify input values.
  CREATE OBJECT G_EVENT_RECEIVER.
  SET HANDLER : G_EVENT_RECEIVER->HANDLE_DATA_CHANGED FOR G_GRID.

*   Create field category
  PERFORM CREATE_FIELD_CATEGORY USING FALSE.

  CALL METHOD G_GRID->REGISTER_EDIT_EVENT
       EXPORTING I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.

  CALL METHOD G_GRID->SET_READY_FOR_INPUT
     EXPORTING
            I_READY_FOR_INPUT = 0.

  PERFORM SORT_BUILD USING GT_SORT[].

*   Setting for layout
  PERFORM SET_LVC_LAYOUT.

*   Set colors
  PERFORM SET_COLOR.

*   Set variant
  GV_REPID = GS_VARIANT-REPORT = SY-REPID.
  GS_VARIANT-VARIANT = P_VARI.

*   Define cell attribute
  PERFORM BUILD_CELL_ATTR.


ENDFORM.                    " CREATE_AND_INIT_ALV
*&---------------------------------------------------------------------*
*&      Form  CREATE_FIELD_CATEGORY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FALSE  text
*----------------------------------------------------------------------*
FORM CREATE_FIELD_CATEGORY USING MODE_EDIT.
  DATA: L_POS       TYPE I.
  DEFINE __CATALOG.
    L_POS = L_POS + 1.
    CLEAR GS_FCAT.
    GS_FCAT-COL_POS       = L_POS.
    GS_FCAT-KEY           = &1.
    GS_FCAT-FIELDNAME     = &2.
    GS_FCAT-COLTEXT       = &3.     " Column heading
    GS_FCAT-OUTPUTLEN     = &4.     " Column width
    GS_FCAT-DATATYPE      = &5.     " Data type
    GS_FCAT-EMPHASIZE     = &6.
    APPEND GS_FCAT TO GT_FCAT.
  END-OF-DEFINITION.

  DATA : $IX(2) TYPE N,
         $MTXT(6).

  __CATALOG :
    'X'  'KOSTL'             'Cost.Cc'            10 'CHAR' '',
    'X'  'ACT_TYPE'          'ActType'            10 'CHAR' ''
.

  DO 12 TIMES.
    $IX = SY-INDEX.
    CONCATENATE 'MEG0' $IX INTO $MTXT.
    __CATALOG :
      ' '  $MTXT    $IX                15  'DEC' '' .
  ENDDO.

  LOOP AT GT_FCAT INTO GS_FCAT.
    IF GS_FCAT-FIELDNAME CP 'MEG0*'.
      GS_FCAT-JUST = 'R'.
      GS_FCAT-NO_ZERO = 'X'.
      GS_FCAT-DECIMALS_O = '0'.
    ENDIF.
    GS_FCAT-REF_TABLE = 'ZTCOU132'.
    GS_FCAT-REF_FIELD = GS_FIELDCAT-FIELDNAME.

    MODIFY GT_FCAT FROM GS_FCAT.
  ENDLOOP.

ENDFORM.                    " CREATE_FIELD_CATEGORY
*&---------------------------------------------------------------------*
*&      Form  SORT_BUILD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_SORT[]  text
*----------------------------------------------------------------------*
FORM SORT_BUILD USING FT_SORT TYPE LVC_T_SORT.
  DEFINE SORT_TAB.
    CLEAR GS_SORT.
    GS_SORT-FIELDNAME = &1.
    GS_SORT-SPOS      = &2.
    GS_SORT-UP        = &3.
    GS_SORT-GROUP     = &4.
    GS_SORT-SUBTOT    = &5.
    GS_SORT-COMP      = &6.
    APPEND GS_SORT TO FT_SORT.
  END-OF-DEFINITION.

  SORT_TAB :
      'KOSTL'             ' ' 'X' '' 'X' '',
      'ACT_TYPE'               ' ' 'X' '' 'X' ''.

ENDFORM.                    " SORT_BUILD
*&---------------------------------------------------------------------*
*&      Form  SET_LVC_LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SET_LVC_LAYOUT.

  CLEAR GS_LAYO.
  GS_LAYO-EDIT       = 'X'.
  GS_LAYO-ZEBRA      = 'X'.
  GS_LAYO-SEL_MODE   = 'A'.       " Column and row selection
  GS_LAYO-CWIDTH_OPT = 'X'.
  GS_LAYO-CTAB_FNAME = 'TABCOLOR'.
  GS_LAYO-STYLEFNAME = 'CELLTAB'.
ENDFORM.                    " SET_LVC_LAYOUT
*&---------------------------------------------------------------------*
*&      Form  SET_COLOR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SET_COLOR.
  DATA : $IX(2) TYPE N,
         $MTXT(6).

  CLEAR: GS_SPECIALCOL, GT_SPECIALCOL[], GT_OUT-TABCOLOR[].

  DEFINE __COLOR.
    GS_SPECIALCOL-FIELDNAME = &1 .
    GS_SPECIALCOL-COLOR-COL = &2 .
    GS_SPECIALCOL-COLOR-INT = &3 .
    APPEND GS_SPECIALCOL TO GT_SPECIALCOL .
  END-OF-DEFINITION.

  __COLOR :
            'KOSTL'            '1' 0,
            'ACT_TYPE'              '1' 0.

  DO 12 TIMES.
    $IX = SY-INDEX.
    CONCATENATE 'MEG0' $IX INTO $MTXT.
    __COLOR :
             $MTXT             '3' 0.
  ENDDO.

*  __COLOR :
*            'ICON'    '1' 0,
*            'MSG'     '1' 0.
*
  GT_OUT-TABCOLOR[] = GT_SPECIALCOL[].
  MODIFY GT_OUT TRANSPORTING TABCOLOR WHERE TABCOLOR IS INITIAL.

ENDFORM.                    " SET_COLOR
*&---------------------------------------------------------------------*
*&      Form  BUILD_CELL_ATTR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM BUILD_CELL_ATTR.
  DATA: LT_CELLTAB TYPE LVC_T_STYL,
        LS_CELLTAB TYPE LVC_S_STYL.

  CLEAR LT_CELLTAB.
  REFRESH LT_CELLTAB.

  CLEAR GS_FCAT.

  LOOP AT GT_FCAT INTO GS_FCAT.
    LS_CELLTAB-FIELDNAME = GS_FCAT-FIELDNAME.
    IF LS_CELLTAB-FIELDNAME CP 'MEG0*'
      OR LS_CELLTAB-FIELDNAME EQ 'ACT_TYPE'.
      LS_CELLTAB-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
    ELSE.
      LS_CELLTAB-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
    ENDIF.
    INSERT LS_CELLTAB INTO TABLE LT_CELLTAB.
  ENDLOOP.

  CLEAR GT_OUT-CELLTAB.
  INSERT LINES OF LT_CELLTAB INTO TABLE GT_OUT-CELLTAB.
  MODIFY GT_OUT TRANSPORTING CELLTAB WHERE CELLTAB IS INITIAL.
  PERFORM BUILD_CELL_ATTR1_LOCK.

ENDFORM.                    " BUILD_CELL_ATTR
*&---------------------------------------------------------------------*
*&      Form  BUILD_CELL_ATTR1_LOCK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM BUILD_CELL_ATTR1_LOCK.

*  DATA: LT_CELLTAB TYPE LVC_T_STYL,
*        LS_CELLTAB TYPE LVC_S_STYL.
*
*  CLEAR LT_CELLTAB.
*  REFRESH LT_CELLTAB.
*
*  __CLS GT_OUT-CELLTAB.
*  MODIFY GT_OUT TRANSPORTING CELLTAB WHERE FEVOR = SPACE.
*
*  CLEAR GS_FCAT.
*
*  LOOP AT GT_FCAT INTO GS_FCAT.
*    LS_CELLTAB-FIELDNAME = GS_FCAT1-FIELDNAME.
*    LS_CELLTAB-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
*    INSERT LS_CELLTAB INTO TABLE LT_CELLTAB.
*  ENDLOOP.
*
*  INSERT LINES OF LT_CELLTAB INTO TABLE GT_OUT-CELLTAB.
*  MODIFY GT_OUT TRANSPORTING CELLTAB WHERE FEVOR = SPACE.
*

ENDFORM.                    " BUILD_CELL_ATTR1_LOCK
*&---------------------------------------------------------------------*
*&      Form  SWITCH_EDIT_MODE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SWITCH_EDIT_MODE.
  DATA ANSWER.
  IF G_GRID->IS_READY_FOR_INPUT( ) EQ 0.
    CALL METHOD G_GRID->SET_READY_FOR_INPUT
                     EXPORTING I_READY_FOR_INPUT = 1.

    PERFORM INFO_TEXT_SET USING TRUE.
  ELSE.
**    IF FLAG_DATA_CHANGED EQ TRUE.
**      CALL FUNCTION 'POPUP_TO_CONFIRM_LOSS_OF_DATA'
**           EXPORTING
**                TEXTLINE1     = 'Data has not been saved yet.'
**                TEXTLINE2     = 'Do you want to continue anyway? '
**                TITEL         = 'Confirmation'
**                DEFAULTOPTION = 'N'
**           IMPORTING
**                ANSWER        = ANSWER.
**      CHECK ANSWER EQ 'J'.
**    ENDIF.
**    CLEAR FLAG_DATA_CHANGED.
    CALL METHOD G_GRID->SET_READY_FOR_INPUT
                     EXPORTING I_READY_FOR_INPUT = 0.
    PERFORM INFO_TEXT_SET USING FALSE.
  ENDIF.

  PERFORM BUILD_CELL_ATTR.
ENDFORM.                    " SWITCH_EDIT_MODE
*&---------------------------------------------------------------------*
*&      Form  INFO_TEXT_SET
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_TRUE  text
*----------------------------------------------------------------------*
FORM INFO_TEXT_SET USING    P_TRUE.
  IF P_TRUE EQ TRUE.
    INFO = TEXT-015.
  ELSE.
    INFO = TEXT-015.
  ENDIF.

ENDFORM.                    " INFO_TEXT_SET
*&---------------------------------------------------------------------*
*&      Module  STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0300 OUTPUT.
  SET PF-STATUS 'ZLOG'.
  SY-TITLE = 'Error log...'.
  SUPPRESS DIALOG.
  LEAVE TO LIST-PROCESSING AND RETURN TO SCREEN 0.
  PERFORM ERROR_LIST.
ENDMODULE.                 " STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*&      Form  ERROR_LIST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ERROR_LIST.

  LOOP AT GT_RETURN.
    WRITE:/ GT_RETURN-MESSAGE_V1(20),
            GT_RETURN-MESSAGE_V2(10),
            GT_RETURN-MESSAGE(40).
  ENDLOOP.

ENDFORM.                    " ERROR_LIST
*&---------------------------------------------------------------------*
*&      Form  user_status
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM USER_STATUS.
  __CLS FTAB.

  IF G_GRID->IS_READY_FOR_INPUT( ) EQ 1.
    FTAB-FCODE = 'SAVE'.
    APPEND FTAB.
    FTAB-FCODE = 'LOGV'.
    APPEND FTAB.
  ENDIF.

  SET PF-STATUS '100' EXCLUDING FTAB.
ENDFORM.                    " user_status
*&---------------------------------------------------------------------*
*&      Form  APPLY_CCA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM APPLY_CCA.

  __CLS $GT_OUT.

  DATA: LT_ROW   TYPE LVC_T_ROW,
        LS_ROW   TYPE LVC_S_ROW,
        LT_ROID  TYPE LVC_T_ROID,
        LV_CNT(5),
        LV_DCNT(5),
        LV_MSG(200).                 " Message

  DATA  LT_MESSAGES      LIKE MESSAGES       OCCURS 0 WITH HEADER LINE.
  DATA  $MESSAGES      LIKE MESSAGES       OCCURS 0 WITH HEADER LINE.


* Save seleted data to table ZTCOU135
  CLEAR: LV_CNT, LT_ROW[], LT_ROID[].

  PERFORM GET_SELECTED_ROWS TABLES $GT_OUT.

*  DATA  : I_ZTCOU135 LIKE ZTCOU135 OCCURS 0 WITH HEADER LINE,
*          LS_ZTCOU135 LIKE ZTCOU135,
*          LT_DEL_ROWS TYPE TABLE OF ZTCOU135.
*
*  CALL METHOD G_EVENT_RECEIVER->GET_DELETED_ROWS
*            IMPORTING DELETED_ROWS = LT_DEL_ROWS.

  __CLS IT_POST.
  __CLS GT_RETURN.

  SORT $GT_OUT.

  LOOP AT $GT_OUT.
    MOVE-CORRESPONDING $GT_OUT TO IT_POST.
    APPEND IT_POST.
    CLEAR IT_POST.

    AT END OF ACT_TYPE.
      PERFORM CALL_BAPI.
      CLEAR IT_POST.
      REFRESH  IT_POST.
    ENDAT.
  ENDLOOP.

  IF P_TRUN = 'X'.
    MESSAGE S009(ZMCO) WITH '- TEST RUN'.
  ELSE.
    MESSAGE S009(ZMCO) WITH ''.
  ENDIF.


ENDFORM.                    " APPLY_CCA
*&---------------------------------------------------------------------*
*&      Form  GET_SELECTED_ROWS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_$GT_OUT  text
*----------------------------------------------------------------------*
FORM GET_SELECTED_ROWS TABLES $GT_OUT STRUCTURE GT_OUT.

  DATA: LT_ROWS TYPE LVC_T_ROW WITH HEADER LINE,
        LT_ROW_NO TYPE LVC_T_ROID. "Numeric IDs of Selected Rows

  CALL METHOD G_GRID->GET_SELECTED_ROWS
           IMPORTING ET_INDEX_ROWS = LT_ROWS[]
                     ET_ROW_NO     = LT_ROW_NO.

  CALL METHOD CL_GUI_CFW=>FLUSH.

  IF SY-SUBRC NE 0.
    MESSAGE E000
    WITH 'Error founded during flushing of ALV Grid Control'.
    EXIT.
  ENDIF.

  READ TABLE LT_ROWS INDEX 1.
  IF SY-SUBRC NE 0.
    $GT_OUT[] = GT_OUT[].
  ELSE.
    LOOP AT LT_ROWS WHERE ROWTYPE IS INITIAL.
      READ TABLE GT_OUT INDEX LT_ROWS-INDEX.
      GT_OUT-CHK = TRUE .
      MODIFY GT_OUT INDEX LT_ROWS-INDEX .
    ENDLOOP.
    LOOP AT GT_OUT.
      CHECK GT_OUT-CHK EQ TRUE.
      $GT_OUT = GT_OUT.
      APPEND $GT_OUT.
    ENDLOOP.
  ENDIF.

  GT_OUT-CHK = FALSE .
  MODIFY GT_OUT TRANSPORTING CHK WHERE CHK EQ TRUE.

ENDFORM.                    " get_selected_rows
*&---------------------------------------------------------------------*
*&      Form  VALIDATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM VALIDATE.

  CLEAR : G_ERROR.

  SELECT SINGLE WAERS INTO G_CURK FROM
      TKA01 WHERE KOKRS EQ P_KOKRS.
  IF SY-SUBRC NE 0.
    MESSAGE S000 WITH 'Please enter the valid CO-Area!'.
    G_ERROR = TRUE.
  ENDIF.

  CLEAR *ZTCOU132.
  CASE 'X'.
    WHEN P_ALL.
       *ZTCOU132-UPLOAD_TYPE = 'ALL'.
    WHEN P_QTY.
       *ZTCOU132-UPLOAD_TYPE = 'ACTIVITY'.
    WHEN P_CAP.
       *ZTCOU132-UPLOAD_TYPE = 'CAPACITY'.
  ENDCASE.
ENDFORM.                    " VALIDATE
*&---------------------------------------------------------------------*
*&      Form  CALL_BAPI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CALL_BAPI.

  CLEAR: WA_HEADERINFO, IT_INDEXSTRUCTURE, IT_COOBJECT,
         IT_PERVALUE, IT_RETURN.
  REFRESH: IT_INDEXSTRUCTURE, IT_COOBJECT,
           IT_PERVALUE, IT_RETURN.

* Sort to post data.
  SORT IT_POST BY KOSTL.

  WA_HEADERINFO-CO_AREA       = P_KOKRS.
  WA_HEADERINFO-FISC_YEAR     = P_YEAR.
  WA_HEADERINFO-PERIOD_FROM   = '001'.
  WA_HEADERINFO-PERIOD_TO	   = '012'.
  WA_HEADERINFO-VERSION       = P_VERSN.
  WA_HEADERINFO-PLAN_CURRTYPE = 'C'.

  DATA $FLAG(1).

  LOOP AT IT_POST.
*   Obj
    AT NEW KOSTL.
      $FLAG = TRUE.
    ENDAT.

    IF $FLAG EQ TRUE.
      CLEAR $FLAG.
*     Index of Object Key
      IT_INDEXSTRUCTURE-OBJECT_INDEX
           = IT_INDEXSTRUCTURE-OBJECT_INDEX + 1 .

      CLEAR IT_COOBJECT.
      IT_COOBJECT-OBJECT_INDEX = IT_INDEXSTRUCTURE-OBJECT_INDEX.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
           EXPORTING
                INPUT  = IT_POST-KOSTL
           IMPORTING
                OUTPUT = IT_COOBJECT-COSTCENTER.

      IT_COOBJECT-ACTTYPE     = IT_POST-ACT_TYPE.

      APPEND IT_COOBJECT.
      CLEAR  IT_COOBJECT.
    ENDIF.

*   Value.
*   Index of Value
    IT_INDEXSTRUCTURE-VALUE_INDEX
         = IT_INDEXSTRUCTURE-VALUE_INDEX + 1.

    CLEAR IT_PERVALUE.
    IT_PERVALUE-VALUE_INDEX = IT_INDEXSTRUCTURE-VALUE_INDEX.

    IF *ZTCOU132-UPLOAD_TYPE EQ 'ACTIVITY'.
      PERFORM SET_VALUE_AMT.
    ELSEIF *ZTCOU132-UPLOAD_TYPE EQ 'CAPACITY'.
      PERFORM SET_VALUE_AMT_CAP.
    ELSE.
      PERFORM SET_VALUE_AMT.
      PERFORM SET_VALUE_AMT_CAP.
    ENDIF.

    APPEND IT_PERVALUE.
    CLEAR  IT_PERVALUE.

    APPEND IT_INDEXSTRUCTURE.
    CLEAR IT_POST.
  ENDLOOP.

  IF P_TRUN EQ TRUE.

    CALL FUNCTION 'BAPI_COSTACTPLN_CHECKACTOUTPUT'
         EXPORTING
              HEADERINFO     = WA_HEADERINFO
              DELTA          = GV_DELTA
         TABLES
              INDEXSTRUCTURE = IT_INDEXSTRUCTURE
              COOBJECT       = IT_COOBJECT
              PERVALUE       = IT_PERVALUE
              RETURN         = IT_RETURN.

  ELSE.
    CALL FUNCTION 'BAPI_COSTACTPLN_POSTACTOUTPUT'
         EXPORTING
              HEADERINFO     = WA_HEADERINFO
              DELTA          = GV_DELTA
         TABLES
              INDEXSTRUCTURE = IT_INDEXSTRUCTURE
              COOBJECT       = IT_COOBJECT
              PERVALUE       = IT_PERVALUE
              RETURN         = IT_RETURN.

* Commit
    DATA LT_RETURN LIKE BAPIRET2.
    CLEAR LT_RETURN.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
         EXPORTING
              WAIT   = 'X'
         IMPORTING
              RETURN = LT_RETURN.
  ENDIF.

* Check error
  CLEAR  IT_RETURN.
  APPEND LINES OF IT_RETURN TO GT_RETURN.

  LOOP AT IT_RETURN  WHERE TYPE CA 'AE'.
    MESSAGE ID     IT_RETURN-ID
            TYPE   IT_RETURN-TYPE
            NUMBER IT_RETURN-NUMBER
            WITH   IT_RETURN-MESSAGE_V1
                   IT_RETURN-MESSAGE_V2
                   IT_RETURN-MESSAGE_V3
                   IT_RETURN-MESSAGE_V4.
    CLEAR IT_RETURN.
  ENDLOOP.

ENDFORM.                    " CALL_BAPI
*&---------------------------------------------------------------------*
*&      Form  SET_VALUE_AMT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SET_VALUE_AMT.
* Fixed Cost
* Variable Cost
  TRANS_VALUE 01. TRANS_VALUE 02. TRANS_VALUE 03. TRANS_VALUE 04.
  TRANS_VALUE 05. TRANS_VALUE 06. TRANS_VALUE 07. TRANS_VALUE 08.
  TRANS_VALUE 09. TRANS_VALUE 10. TRANS_VALUE 11. TRANS_VALUE 12.
  TRANS_VALUE 13. TRANS_VALUE 14. TRANS_VALUE 15. TRANS_VALUE 16.
ENDFORM.                    " SET_VALUE_AMT
*&---------------------------------------------------------------------*
*&      Form  SET_VALUE_AMT_CAP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SET_VALUE_AMT_CAP.
  TRANS_VALUE_CAP 01. TRANS_VALUE_CAP 02. TRANS_VALUE_CAP 03.
  TRANS_VALUE_CAP 04. TRANS_VALUE_CAP 05. TRANS_VALUE_CAP 06.
  TRANS_VALUE_CAP 07. TRANS_VALUE_CAP 08. TRANS_VALUE_CAP 09.
  TRANS_VALUE_CAP 10. TRANS_VALUE_CAP 11. TRANS_VALUE_CAP 12.
  TRANS_VALUE_CAP 13. TRANS_VALUE_CAP 14. TRANS_VALUE_CAP 15.
  TRANS_VALUE_CAP 16.
ENDFORM.                    " SET_VALUE_AMT_CAP
